{"uid":"77f9b3929d8ed0c2","name":"test_login_page_title[chrome]","fullName":"Tests.test_LoginPage.Test_Login#test_login_page_title","historyId":"8a414e37dd41e3c60892930081a8827f","time":{"start":1713633000100,"stop":1713633011185,"duration":11085},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <Tests.test_LoginPage.Test_Login object at 0x0000016E49BCC800>\n\n    def test_login_page_title(self):\n        self.loginPage = LoginPage(self.driver)\n>       title = self.loginPage.get_title(TestData.LOGIN_PAGE_TITLE)\n\nTests\\test_LoginPage.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\BasePage.py:27: in get_title\n    WebDriverWait(self.driver,10).until(EC.title_is(title))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"355bec52733b779d30e09db49b9e1887\")>\nmethod = <function title_is.<locals>._predicate at 0x0000016E49BD2700>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"init_driver","time":{"start":1713632991636,"stop":1713632996378,"duration":4742},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message:","statusTrace":"self = <Tests.test_LoginPage.Test_Login object at 0x0000016E49BCC800>\n\n    def test_login_page_title(self):\n        self.loginPage = LoginPage(self.driver)\n>       title = self.loginPage.get_title(TestData.LOGIN_PAGE_TITLE)\n\nTests\\test_LoginPage.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\BasePage.py:27: in get_title\n    WebDriverWait(self.driver,10).until(EC.title_is(title))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"355bec52733b779d30e09db49b9e1887\")>\nmethod = <function title_is.<locals>._predicate at 0x0000016E49BD2700>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException","steps":[],"attachments":[{"uid":"7101704a8ff8aeea","name":"Attachment","source":"7101704a8ff8aeea.png","type":"image/png","size":246192}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentStep":false,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"init_driver::0","time":{"start":1713633018119,"stop":1713633020476,"duration":2357},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('init_driver')"},{"name":"parentSuite","value":"Tests"},{"name":"suite","value":"test_LoginPage"},{"name":"subSuite","value":"Test_Login"},{"name":"host","value":"Utkarsh"},{"name":"thread","value":"9064-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Tests.test_LoginPage"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"init_driver","value":"'chrome'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3716bdc787ad6920","status":"broken","statusDetails":"selenium.common.exceptions.TimeoutException: Message:","time":{"start":1713632437322,"stop":1713632448464,"duration":11142}}],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures('init_driver')"]},"source":"77f9b3929d8ed0c2.json","parameterValues":["'chrome'"]}